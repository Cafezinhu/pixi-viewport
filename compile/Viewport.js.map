{"version":3,"file":"Viewport.js","sourceRoot":"","sources":["../src/Viewport.ts"],"names":[],"mappings":"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","sourcesContent":["import { Container } from '@pixi/display';\nimport { IPointData, Point, Rectangle, Ticker } from '@pixi/core';\n\nimport { InputManager } from './InputManager';\nimport { PluginManager } from './PluginManager';\nimport {\n    Animate, IAnimateOptions,\n    Bounce, IBounceOptions,\n    Clamp, IClampOptions,\n    ClampZoom, IClampZoomOptions,\n    Decelerate, IDecelerateOptions,\n    Drag, IDragOptions,\n    Follow, IFollowOptions,\n    MouseEdges, IMouseEdgesOptions,\n    Pinch, IPinchOptions,\n    Snap, ISnapOptions,\n    SnapZoom, ISnapZoomOptions,\n    Wheel, IWheelOptions,\n} from './plugins';\n\nimport type { DisplayObject, IDestroyOptions } from '@pixi/display';\nimport type { IHitArea, EventSystem } from '@pixi/events';\n\n/** Options for {@link Viewport}. */\nexport interface IViewportOptions\n{\n    /** @default window.innerWidth */\n    screenWidth?: number;\n\n    /** @default window.innerHeight */\n    screenHeight?: number;\n\n    /** @default this.width */\n    worldWidth?: number | null;\n\n    /** @default this.height */\n    worldHeight?: number | null;\n\n    /**\n     * Number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event\n     *\n     * @default 5\n     */\n    threshold?: number;\n\n    /**\n     * Whether the 'wheel' event is set to passive (note: if false, e.preventDefault() will be called when wheel\n     * is used over the viewport)\n     *\n     * @default true\n     */\n    passiveWheel?: boolean;\n\n    /**\n     * Whether to stopPropagation of events that impact the viewport (except wheel events, see options.passiveWheel)\n     */\n    stopPropagation?: boolean;\n\n    /**\n     * Change the default hitArea from world size to a new value\n     */\n    forceHitArea?: Rectangle | null;\n\n    /**\n     * Set this if you want to manually call update() function on each frame\n     *\n     * @default false\n     */\n    noTicker?: boolean;\n\n    /**\n     * EventSystem, available from instantiated `WebGLRenderer/CanvasRenderer.plugins.interaction`\n     *\n     * It's used to calculate pointer postion relative to canvas location on screen\n     */\n    interaction?: EventSystem | null;\n\n    /**\n     * Remove oncontextmenu=() => {} from the divWheel element\n     */\n    disableOnContextMenu?: boolean;\n\n    /**\n     * div to attach the wheel event\n     *\n     * @default document.body\n     */\n    divWheel?: HTMLElement;\n\n    /**\n     * Use this PIXI.ticker for updates\n     *\n     * @default PIXI.Ticker.shared\n     */\n    ticker?: Ticker;\n\n    /**\n     * Uses divWheel definition for InputManager to calculate positioning relative to containing div\n     * this is used only if options.interaction is not defined\n     */\n    useDivWheelForInputManager?: boolean;\n}\n\nexport interface ICompleteViewportOptions extends IViewportOptions\n{\n    screenWidth: number;\n    screenHeight: number;\n    threshold: number;\n    passiveWheel: boolean;\n    stopPropagation: boolean;\n    noTicker: boolean;\n    ticker: Ticker;\n}\n\nexport interface IViewportTransformState\n{\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n}\n\nconst DEFAULT_VIEWPORT_OPTIONS: ICompleteViewportOptions = {\n    screenWidth: window.innerWidth,\n    screenHeight: window.innerHeight,\n    worldWidth: null,\n    worldHeight: null,\n    threshold: 5,\n    passiveWheel: true,\n    stopPropagation: false,\n    forceHitArea: null,\n    noTicker: false,\n    interaction: null,\n    disableOnContextMenu: false,\n    ticker: Ticker.shared,\n};\n\n/**\n * Main class to use when creating a Viewport\n *\n * @public\n * @fires clicked\n * @fires drag-start\n * @fires drag-end\n * @fires drag-remove\n * @fires pinch-start\n * @fires pinch-end\n * @fires pinch-remove\n * @fires snap-start\n * @fires snap-end\n * @fires snap-remove\n * @fires snap-zoom-start\n * @fires snap-zoom-end\n * @fires snap-zoom-remove\n * @fires bounce-x-start\n * @fires bounce-x-end\n * @fires bounce-y-start\n * @fires bounce-y-end\n * @fires bounce-remove\n * @fires wheel-start\n * @fires wheel-remove\n * @fires wheel-scroll\n * @fires wheel-scroll-remove\n * @fires mouse-edge-start\n * @fires mouse-edge-end\n * @fires mouse-edge-remove\n * @fires moved\n * @fires moved-end\n * @fires zoomed\n * @fires zoomed-end\n * @fires frame-end\n */\nexport class Viewport extends Container\n{\n    /** Flags whether the viewport is being panned */\n    public moving?: boolean;\n\n    public screenWidth: number;\n    public screenHeight: number;\n\n    /** Number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event */\n    public threshold: number;\n\n    public readonly input: InputManager;\n\n    /** Use this to add user plugins or access existing plugins (e.g., to pause, resume, or remove them) */\n    public readonly plugins: PluginManager;\n\n    /** Flags whether the viewport zoom is being changed. */\n    public zooming?: boolean;\n\n    public lastViewport?: IViewportTransformState | null;\n\n    /** The options passed when creating this viewport, merged with the default values */\n    public readonly options: ICompleteViewportOptions & { divWheel: HTMLElement };\n\n    private _dirty?: boolean;\n    private _forceHitArea?: IHitArea | null;\n    private _hitAreaDefault?: Rectangle;\n    private _pause?: boolean;\n    private readonly tickerFunction?: () => void;\n    private _worldWidth?: number | null;\n    private _worldHeight?: number | null;\n    private _disableOnContextMenu = (e: MouseEvent) => e.preventDefault();\n\n    /**\n     * @param {IViewportOptions} ViewportOptions\n     * @param {number} [options.screenWidth=window.innerWidth]\n     * @param {number} [options.screenHeight=window.innerHeight]\n     * @param {number} [options.worldWidth=this.width]\n     * @param {number} [options.worldHeight=this.height]\n     * @param {number} [options.threshold=5] number of pixels to move to trigger an input event (e.g., drag, pinch)\n     * or disable a clicked event\n     * @param {boolean} [options.passiveWheel=true] whether the 'wheel' event is set to passive (note: if false,\n     * e.preventDefault() will be called when wheel is used over the viewport)\n     * @param {boolean} [options.stopPropagation=false] whether to stopPropagation of events that impact the viewport\n     * (except wheel events, see options.passiveWheel)\n     * @param {HitArea} [options.forceHitArea] change the default hitArea from world size to a new value\n     * @param {boolean} [options.noTicker] set this if you want to manually call update() function on each frame\n     * @param {PIXI.Ticker} [options.ticker=PIXI.Ticker.shared] use this PIXI.ticker for updates\n     * @param {PIXI.EventSystem} [options.interaction=null] EventSystem, available from instantiated\n     * WebGLRenderer/CanvasRenderer.plugins.interaction - used to calculate pointer position relative to canvas\n     * location on screen\n     * @param {HTMLElement} [options.divWheel=document.body] div to attach the wheel event\n     * @param {boolean} [options.disableOnContextMenu] remove oncontextmenu=() => {} from the divWheel element\n     */\n    constructor(options: IViewportOptions = {})\n    {\n        super();\n        this.options = Object.assign(\n            {},\n            { divWheel: document.body },\n            DEFAULT_VIEWPORT_OPTIONS,\n            options\n        );\n\n        this.screenWidth = this.options.screenWidth;\n        this.screenHeight = this.options.screenHeight;\n\n        this._worldWidth = this.options.worldWidth;\n        this._worldHeight = this.options.worldHeight;\n        this.forceHitArea = this.options.forceHitArea;\n        this.threshold = this.options.threshold;\n\n        this.options.divWheel = this.options.divWheel || document.body;\n\n        if (this.options.disableOnContextMenu)\n        {\n            this.options.divWheel.addEventListener('contextmenu', this._disableOnContextMenu);\n        }\n        if (!this.options.noTicker)\n        {\n            this.tickerFunction = () => this.update(this.options.ticker.elapsedMS);\n            this.options.ticker.add(this.tickerFunction);\n        }\n\n        this.input = new InputManager(this);\n        this.plugins = new PluginManager(this);\n    }\n\n    /** Overrides PIXI.Container's destroy to also remove the 'wheel' and PIXI.Ticker listeners */\n    destroy(options?: IDestroyOptions): void\n    {\n        if (!this.options.noTicker && this.tickerFunction)\n        {\n            this.options.ticker.remove(this.tickerFunction);\n        }\n        if (this.options.disableOnContextMenu)\n        {\n            this.options.divWheel.removeEventListener('contextmenu', this._disableOnContextMenu);\n        }\n\n        this.input.destroy();\n        super.destroy(options);\n    }\n\n    /**\n     * Update viewport on each frame.\n     *\n     * By default, you do not need to call this unless you set `options.noTicker=true`.\n     *\n     * @param {number} elapsed time in milliseconds since last update\n     */\n    update(elapsed: number): void\n    {\n        if (!this.pause)\n        {\n            this.plugins.update(elapsed);\n\n            if (this.lastViewport)\n            {\n                // Check for moved-end event\n                if (this.lastViewport.x !== this.x || this.lastViewport.y !== this.y)\n                {\n                    this.moving = true;\n                }\n                else if (this.moving)\n                {\n                    this.emit('moved-end', this);\n                    this.moving = false;\n                }\n\n                // Check for zoomed-end event\n                if (this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y)\n                {\n                    this.zooming = true;\n                }\n                else if (this.zooming)\n                {\n                    this.emit('zoomed-end', this);\n                    this.zooming = false;\n                }\n            }\n\n            if (!this.forceHitArea)\n            {\n                this._hitAreaDefault = new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n                this.hitArea = this._hitAreaDefault;\n            }\n\n            this._dirty = this._dirty || !this.lastViewport\n                || this.lastViewport.x !== this.x || this.lastViewport.y !== this.y\n                || this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y;\n\n            this.lastViewport = {\n                x: this.x,\n                y: this.y,\n                scaleX: this.scale.x,\n                scaleY: this.scale.y\n            };\n            this.emit('frame-end', this);\n        }\n    }\n\n    /**\n     * Use this to set screen and world sizes, needed for pinch/wheel/clamp/bounce.\n     * @param {number} screenWidth=window.innerWidth\n     * @param {number} screenHeight=window.innerHeight\n     * @param {number} [worldWidth]\n     * @param {number} [worldHeight]\n     */\n    resize(\n        screenWidth: number = window.innerWidth,\n        screenHeight: number = window.innerHeight,\n        worldWidth?: number,\n        worldHeight?: number\n    ): void\n    {\n        this.screenWidth = screenWidth;\n        this.screenHeight = screenHeight;\n\n        if (typeof worldWidth !== 'undefined')\n        {\n            this._worldWidth = worldWidth;\n        }\n        if (typeof worldHeight !== 'undefined')\n        {\n            this._worldHeight = worldHeight;\n        }\n\n        this.plugins.resize();\n        this.dirty = true;\n    }\n\n    /** World width, in pixels */\n    get worldWidth(): number\n    {\n        if (this._worldWidth)\n        {\n            return this._worldWidth;\n        }\n\n        return this.width / this.scale.x;\n    }\n    set worldWidth(value: number)\n    {\n        this._worldWidth = value;\n        this.plugins.resize();\n    }\n\n    /** World height, in pixels */\n    get worldHeight(): number\n    {\n        if (this._worldHeight)\n        {\n            return this._worldHeight;\n        }\n\n        return this.height / this.scale.y;\n    }\n    set worldHeight(value: number)\n    {\n        this._worldHeight = value;\n        this.plugins.resize();\n    }\n\n    /** Get visible world bounds of viewport */\n    public getVisibleBounds(): Rectangle\n    {\n        return new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n    }\n\n    /** Change coordinates from screen to world */\n    public toWorld<P extends IPointData = Point>(x: number, y: number): P;\n    /** Change coordinates from screen to world */\n    public toWorld<P extends IPointData = Point>(screenPoint: IPointData): P;\n\n    /**\n     * Changes coordinate from screen to world\n     * @param {number|PIXI.Point} x\n     * @param {number} y\n     * @returns {PIXI.Point}\n     */\n    public toWorld<P extends IPointData = Point>(x: number | IPointData, y?: number): P\n    {\n        if (arguments.length === 2)\n        {\n            return this.toLocal<P>(new Point(x as number, y));\n        }\n\n        return this.toLocal<P>(x as IPointData);\n    }\n\n    /** Change coordinates from world to screen */\n    public toScreen<P extends IPointData = Point>(x: number, y: number): P;\n    /** Change coordinates from world to screen */\n    public toScreen<P extends IPointData = Point>(worldPoint: IPointData): P;\n\n    /**\n     * Changes coordinate from world to screen\n     * @param {number|PIXI.Point} x\n     * @param {number} y\n     * @returns {PIXI.Point}\n     */\n    public toScreen<P extends IPointData = Point>(x: number | IPointData, y?: number): P\n    {\n        if (arguments.length === 2)\n        {\n            return this.toGlobal<P>(new Point(x as number, y));\n        }\n\n        return this.toGlobal<P>(x as IPointData);\n    }\n\n    /** Screen width in world coordinates */\n    get worldScreenWidth(): number\n    {\n        return this.screenWidth / this.scale.x;\n    }\n\n    /** Screen height in world coordinates */\n    get worldScreenHeight(): number\n    {\n        return this.screenHeight / this.scale.y;\n    }\n\n    /** World width in screen coordinates */\n    get screenWorldWidth(): number\n    {\n        return this.worldWidth * this.scale.x;\n    }\n\n    /** World height in screen coordinates */\n    get screenWorldHeight(): number\n    {\n        return this.worldHeight * this.scale.y;\n    }\n\n    /** Center of screen in world coordinates */\n    get center(): Point\n    {\n        return new Point(\n            (this.worldScreenWidth / 2) - (this.x / this.scale.x),\n            (this.worldScreenHeight / 2) - (this.y / this.scale.y),\n        );\n    }\n    set center(value: Point)\n    {\n        this.moveCenter(value);\n    }\n\n    public moveCenter(x: number, y: number): Viewport;\n\n    /** Move center of viewport to {@code center}. */\n    public moveCenter(center: IPointData): Viewport;\n\n    /**\n     * Move center of viewport to (x, y)\n     * @param {number|PIXI.Point} x\n     * @param {number} [y]\n     * @return {Viewport}\n     */\n    public moveCenter(...args: [number, number] | [IPointData]): Viewport\n    {\n        let x: number;\n        let y: number;\n\n        if (typeof args[0] === 'number')\n        {\n            x = args[0];\n            y = args[1] as number;\n        }\n        else\n        {\n            x = args[0].x;\n            y = args[0].y;\n        }\n\n        const newX = ((this.worldScreenWidth / 2) - x) * this.scale.x;\n        const newY = ((this.worldScreenHeight / 2) - y) * this.scale.y;\n\n        if (this.x !== newX || this.y !== newY)\n        {\n            this.position.set(newX, newY);\n            this.plugins.reset();\n            this.dirty = true;\n        }\n\n        return this;\n    }\n\n    /** Top-left corner of Viewport */\n    get corner(): Point\n    {\n        return new Point(-this.x / this.scale.x, -this.y / this.scale.y);\n    }\n    set corner(value: Point)\n    {\n        this.moveCorner(value);\n    }\n\n    /** Move Viewport's top-left corner; also clamps and resets decelerate and bounce (as needed) */\n    public moveCorner(x: number, y: number): Viewport;\n\n    /** move Viewport's top-left corner; also clamps and resets decelerate and bounce (as needed) */\n    public moveCorner(center: Point): Viewport;\n\n    /**\n     * MoveCorner\n     * @param {number|PIXI.Point} x\n     * @param {number} [y]\n     * @returns {Viewport}\n     */\n    public moveCorner(...args: [number, number] | [Point]): Viewport\n    {\n        let x;\n        let y;\n\n        if (args.length === 1)\n        {\n            x = -args[0].x * this.scale.x;\n            y = -args[0].y * this.scale.y;\n        }\n        else\n        {\n            x = -args[0] * this.scale.x;\n            y = -args[1] * this.scale.y;\n        }\n\n        if (x !== this.x || y !== this.y)\n        {\n            this.position.set(x, y);\n            this.plugins.reset();\n            this.dirty = true;\n        }\n\n        return this;\n    }\n\n    /** Get how many world pixels fit in screen's width */\n    get screenWidthInWorldPixels(): number\n    {\n        return this.screenWidth / this.scale.x;\n    }\n\n    /** Get how many world pixels fit on screen's height */\n    get screenHeightInWorldPixels(): number\n    {\n        return this.screenHeight / this.scale.y;\n    }\n\n    /**\n     * Find the scale value that fits a world width on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param width - Width in world pixels\n     * @return - scale\n     */\n    findFitWidth(width: number): number\n    {\n        return this.screenWidth / width;\n    }\n\n    /**\n     * Finds the scale value that fits a world height on the screens\n     * does not change the viewport (use fit... to change)\n     *\n     * @param height - Height in world pixels\n     * @return - scale\n     */\n    findFitHeight(height: number): number\n    {\n        return this.screenHeight / height;\n    }\n\n    /**\n     * Finds the scale value that fits the smaller of a world width and world height on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param {number} width in world pixels\n     * @param {number} height in world pixels\n     * @returns {number} scale\n     */\n    findFit(width: number, height: number): number\n    {\n        const scaleX = this.screenWidth / width;\n        const scaleY = this.screenHeight / height;\n\n        return Math.min(scaleX, scaleY);\n    }\n\n    /**\n     * Finds the scale value that fits the larger of a world width and world height on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param {number} width in world pixels\n     * @param {number} height in world pixels\n     * @returns {number} scale\n     */\n    findCover(width: number, height: number): number\n    {\n        const scaleX = this.screenWidth / width;\n        const scaleY = this.screenHeight / height;\n\n        return Math.max(scaleX, scaleY);\n    }\n\n    /**\n     * Change zoom so the width fits in the viewport\n     *\n     * @param width - width in world coordinates\n     * @param center - maintain the same center\n     * @param scaleY - whether to set scaleY=scaleX\n     * @param noClamp - whether to disable clamp-zoom\n     * @returns {Viewport} this\n     */\n    fitWidth(width = this.worldWidth, center?: boolean, scaleY = true, noClamp?: boolean): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n        this.scale.x = this.screenWidth / width;\n\n        if (scaleY)\n        {\n            this.scale.y = this.scale.x;\n        }\n\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (!noClamp && clampZoom)\n        {\n            clampZoom.clamp();\n        }\n\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Change zoom so the height fits in the viewport\n     *\n     * @param {number} [height=this.worldHeight] in world coordinates\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @param {boolean} [scaleX=true] whether to set scaleX = scaleY\n     * @param {boolean} [noClamp] whether to disable clamp-zoom\n     * @returns {Viewport} this\n     */\n    fitHeight(height = this.worldHeight, center?: boolean, scaleX = true, noClamp?: boolean): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n        this.scale.y = this.screenHeight / height;\n\n        if (scaleX)\n        {\n            this.scale.x = this.scale.y;\n        }\n\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (!noClamp && clampZoom)\n        {\n            clampZoom.clamp();\n        }\n\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Change zoom so it fits the entire world in the viewport\n     *\n     * @param {boolean} center maintain the same center of the screen after zoom\n     * @returns {Viewport} this\n     */\n    fitWorld(center?: boolean): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n\n        this.scale.x = this.screenWidth / this.worldWidth;\n        this.scale.y = this.screenHeight / this.worldHeight;\n\n        if (this.scale.x < this.scale.y)\n        {\n            this.scale.y = this.scale.x;\n        }\n        else\n        {\n            this.scale.x = this.scale.y;\n        }\n\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (clampZoom)\n        {\n            clampZoom.clamp();\n        }\n\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Change zoom so it fits the size or the entire world in the viewport\n     *\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @param {number} [width=this.worldWidth] desired width\n     * @param {number} [height=this.worldHeight] desired height\n     * @returns {Viewport} this\n     */\n    fit(center?: boolean, width = this.worldWidth, height = this.worldHeight): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n\n        this.scale.x = this.screenWidth / width;\n        this.scale.y = this.screenHeight / height;\n\n        if (this.scale.x < this.scale.y)\n        {\n            this.scale.y = this.scale.x;\n        }\n        else\n        {\n            this.scale.x = this.scale.y;\n        }\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (clampZoom)\n        {\n            clampZoom.clamp();\n        }\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Zoom viewport to specific value.\n     *\n     * @param {number} scale value (e.g., 1 would be 100%, 0.25 would be 25%)\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n    setZoom(scale: number, center?: boolean): Viewport\n    {\n        let save;\n\n        if (center)\n        {\n            save = this.center;\n        }\n        this.scale.set(scale);\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (clampZoom)\n        {\n            clampZoom.clamp();\n        }\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Zoom viewport by a certain percent (in both x and y direction).\n     *\n     * @param {number} percent change (e.g., 0.25 would increase a starting scale of 1.0 to 1.25)\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n    zoomPercent(percent: number, center?: boolean): Viewport\n    {\n        return this.setZoom(this.scale.x + (this.scale.x * percent), center);\n    }\n\n    /**\n     * Zoom viewport by increasing/decreasing width by a certain number of pixels.\n     *\n     * @param {number} change in pixels\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n    zoom(change: number, center?: boolean): Viewport\n    {\n        this.fitWidth(change + this.worldScreenWidth, center);\n\n        return this;\n    }\n\n    /** Changes scale of viewport and maintains center of viewport */\n    get scaled(): number\n    {\n        return this.scale.x;\n    }\n    set scaled(scale: number)\n    {\n        this.setZoom(scale, true);\n    }\n\n    /**\n     * Returns zoom to the desired scale\n     *\n     * @param {ISnapZoomOptions} options\n     * @param {number} [options.width=0] - the desired width to snap (to maintain aspect ratio, choose width or height)\n     * @param {number} [options.height=0] - the desired height to snap (to maintain aspect ratio, choose width or height)\n     * @param {number} [options.time=1000] - time for snapping in ms\n     * @param {(string|function)} [options.ease=easeInOutSine] ease function or name (see http://easings.net/\n     *   for supported names)\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of center of the viewport\n     * @param {boolean} [options.interrupt=true] - pause snapping with any user input on the viewport\n     * @param {boolean} [options.removeOnComplete] - removes this plugin after snapping is complete\n     * @param {boolean} [options.removeOnInterrupt] - removes this plugin if interrupted by any user input\n     * @param {boolean} [options.forceStart] - starts the snap immediately regardless of whether the viewport is at the\n     *   desired zoom\n     * @param {boolean} [options.noMove] - zoom but do not move\n     */\n    snapZoom(options?: ISnapZoomOptions): Viewport\n    {\n        this.plugins.add('snap-zoom', new SnapZoom(this, options));\n\n        return this;\n    }\n\n    /** Is container out of world bounds */\n    OOB(): {\n        left: boolean;\n        right: boolean;\n        top: boolean;\n        bottom: boolean;\n        cornerPoint: Point;\n    }\n    {\n        return {\n            left: this.left < 0,\n            right: this.right > this.worldWidth,\n            top: this.top < 0,\n            bottom: this.bottom > this.worldHeight,\n            cornerPoint: new Point(\n                (this.worldWidth * this.scale.x) - this.screenWidth,\n                (this.worldHeight * this.scale.y) - this.screenHeight\n            )\n        };\n    }\n\n    /** World coordinates of the right edge of the screen */\n    get right(): number\n    {\n        return (-this.x / this.scale.x) + this.worldScreenWidth;\n    }\n    set right(value: number)\n    {\n        this.x = (-value * this.scale.x) + this.screenWidth;\n        this.plugins.reset();\n    }\n\n    /** World coordinates of the left edge of the screen */\n    get left(): number\n    {\n        return -this.x / this.scale.x;\n    }\n    set left(value: number)\n    {\n        this.x = -value * this.scale.x;\n        this.plugins.reset();\n    }\n\n    /** World coordinates of the top edge of the screen */\n    get top(): number\n    {\n        return -this.y / this.scale.y;\n    }\n    set top(value: number)\n    {\n        this.y = -value * this.scale.y;\n        this.plugins.reset();\n    }\n\n    /** World coordinates of the bottom edge of the screen */\n    get bottom(): number\n    {\n        return (-this.y / this.scale.y) + this.worldScreenHeight;\n    }\n    set bottom(value: number)\n    {\n        this.y = (-value * this.scale.y) + this.screenHeight;\n        this.plugins.reset();\n    }\n\n    /**\n     * Determines whether the viewport is dirty (i.e., needs to be rendered to the screen because of a change)\n     */\n    get dirty(): boolean\n    {\n        return !!this._dirty;\n    }\n    set dirty(value: boolean)\n    {\n        this._dirty = value;\n    }\n\n    /**\n     * Permanently changes the Viewport's hitArea\n     *\n     * NOTE: if not set then hitArea = PIXI.Rectangle(Viewport.left, Viewport.top, Viewport.worldScreenWidth,\n     * Viewport.worldScreenHeight)\n     */\n    get forceHitArea(): IHitArea | null | undefined\n    {\n        return this._forceHitArea;\n    }\n    set forceHitArea(value: IHitArea | null | undefined)\n    {\n        if (value)\n        {\n            this._forceHitArea = value;\n            this.hitArea = value;\n        }\n        else\n        {\n            this._forceHitArea = null;\n            this.hitArea = new Rectangle(0, 0, this.worldWidth, this.worldHeight);\n        }\n    }\n\n    /**\n     * Enable one-finger touch to drag\n     *\n     * NOTE: if you expect users to use right-click dragging, you should enable `viewport.options.disableOnContextMenu`\n     * to avoid the context menu popping up on each right-click drag.\n     *\n     * @param {IDragOptions} [options]\n     * @param {string} [options.direction=all] direction to drag\n     * @param {boolean} [options.pressDrag=true] whether click to drag is active\n     * @param {boolean} [options.wheel=true] use wheel to scroll in direction (unless wheel plugin is active)\n     * @param {number} [options.wheelScroll=1] number of pixels to scroll with each wheel spin\n     * @param {boolean} [options.reverse] reverse the direction of the wheel scroll\n     * @param {(boolean|string)} [options.clampWheel=false] clamp wheel(to avoid weird bounce with mouse wheel)\n     * @param {string} [options.underflow=center] where to place world if too small for screen\n     * @param {number} [options.factor=1] factor to multiply drag to increase the speed of movement\n     * @param {string} [options.mouseButtons=all] changes which mouse buttons trigger drag, use: 'all', 'left',\n     *  'right' 'middle', or some combination, like, 'middle-right'; you may want to set\n     *   viewport.options.disableOnContextMenu if you want to use right-click dragging\n     * @param {string[]} [options.keyToPress=null] - array containing\n     *  {@link key|https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} codes of keys that can be\n     *  pressed for the drag to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}.\n     * @param {boolean} [options.ignoreKeyToPressOnTouch=false] - ignore keyToPress for touch events\n     * @param {number} [options.lineHeight=20] - scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     * @returns {Viewport} this\n     */\n    public drag(options?: IDragOptions): Viewport\n    {\n        this.plugins.add('drag', new Drag(this, options));\n\n        return this;\n    }\n\n    /**\n     * Clamp to world boundaries or other provided boundaries\n     * There are three ways to clamp:\n     * 1. direction: 'all' = the world is clamped to its world boundaries, ie, you cannot drag any part of offscreen\n     *    direction: 'x' | 'y' = only the x or y direction is clamped to its world boundary\n     * 2. left, right, top, bottom = true | number = the world is clamped to the world's pixel location for each side;\n     *    if any of these are set to true, then the location is set to the boundary\n     *    [0, viewport.worldWidth/viewport.worldHeight], eg: to allow the world to be completely dragged offscreen,\n     *    set [-viewport.worldWidth, -viewport.worldHeight, viewport.worldWidth * 2, viewport.worldHeight * 2]\n     *\n     * Underflow determines what happens when the world is smaller than the viewport\n     * 1. none = the world is clamped but there is no special behavior\n     * 2. center = the world is centered on the viewport\n     * 3. combination of top/bottom/center and left/right/center (case insensitive) = the world is stuck to the\n     *     appropriate boundaries\n     *\n     * NOTES:\n     *   clamp is disabled if called with no options; use { direction: 'all' } for all edge clamping\n     *   screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\n     *\n     * @param {object} [options]\n     * @param {(number|boolean)} [options.left=false] - clamp left; true = 0\n     * @param {(number|boolean)} [options.right=false] - clamp right; true = viewport.worldWidth\n     * @param {(number|boolean)} [options.top=false] - clamp top; true = 0\n     * @param {(number|boolean)} [options.bottom=false] - clamp bottom; true = viewport.worldHeight\n     * @param {string} [direction] - (all, x, or y) using clamps of [0, viewport.worldWidth/viewport.worldHeight];\n     *  replaces left/right/top/bottom if set\n     * @param {string} [underflow=center] - where to place world if too small for screen (e.g., top-right, center,\n     *  none, bottomLeft)     * @returns {Viewport} this\n     */\n    public clamp(options?: IClampOptions): Viewport\n    {\n        this.plugins.add('clamp', new Clamp(this, options));\n\n        return this;\n    }\n\n    /**\n     * Decelerate after a move\n     *\n     * NOTE: this fires 'moved' event during deceleration\n     *\n     * @param {IDecelerateOptions} [options]\n     * @param {number} [options.friction=0.95] - percent to decelerate after movement\n     * @param {number} [options.bounce=0.8] - percent to decelerate when past boundaries (only applicable when\n     *   viewport.bounce() is active)\n     * @param {number} [options.minSpeed=0.01] - minimum velocity before stopping/reversing acceleration\n     * @return {Viewport} this\n     */\n    public decelerate(options?: IDecelerateOptions): Viewport\n    {\n        this.plugins.add('decelerate', new Decelerate(this, options));\n\n        return this;\n    }\n\n    /**\n     * Bounce on borders\n     * NOTES:\n     *    screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\n     *    fires 'moved', 'bounce-x-start', 'bounce-y-start', 'bounce-x-end', and 'bounce-y-end' events\n     * @param {object} [options]\n     * @param {string} [options.sides=all] - all, horizontal, vertical, or combination of top, bottom, right, left\n     *  (e.g., 'top-bottom-right')\n     * @param {number} [options.friction=0.5] - friction to apply to decelerate if active\n     * @param {number} [options.time=150] - time in ms to finish bounce\n     * @param {object} [options.bounceBox] - use this bounceBox instead of (0, 0, viewport.worldWidth, viewport.worldHeight)\n     * @param {number} [options.bounceBox.x=0]\n     * @param {number} [options.bounceBox.y=0]\n     * @param {number} [options.bounceBox.width=viewport.worldWidth]\n     * @param {number} [options.bounceBox.height=viewport.worldHeight]\n     * @param {string|function} [options.ease=easeInOutSine] - ease function or name\n     *  (see http://easings.net/ for supported names)\n     * @param {string} [options.underflow=center] - (top/bottom/center and left/right/center, or center)\n     *  where to place world if too small for screen\n     * @return {Viewport} this\n     */\n    public bounce(options?: IBounceOptions): Viewport\n    {\n        this.plugins.add('bounce', new Bounce(this, options));\n\n        return this;\n    }\n\n    /**\n     * Enable pinch to zoom and two-finger touch to drag\n     *\n     * @param {PinchOptions} [options]\n     * @param {boolean} [options.noDrag] - disable two-finger dragging\n     * @param {number} [options.percent=1] - percent to modify pinch speed\n     * @param {number} [options.factor=1] - factor to multiply two-finger drag to increase the speed of movement\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of center of two fingers\n     * @param {('all'|'x'|'y')} [options.axis=all] - axis to zoom\n     * @return {Viewport} this\n     */\n    public pinch(options?: IPinchOptions): Viewport\n    {\n        this.plugins.add('pinch', new Pinch(this, options));\n\n        return this;\n    }\n\n    /**\n     * Snap to a point\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {ISnapOptions} [options]\n     * @param {boolean} [options.topLeft] - snap to the top-left of viewport instead of center\n     * @param {number} [options.friction=0.8] - friction/frame to apply if decelerate is active\n     * @param {number} [options.time=1000] - time in ms to snap\n     * @param {string|function} [options.ease=easeInOutSine] - ease function or name (see http://easings.net/\n     *   for supported names)\n     * @param {boolean} [options.interrupt=true] - pause snapping with any user input on the viewport\n     * @param {boolean} [options.removeOnComplete] - removes this plugin after snapping is complete\n     * @param {boolean} [options.removeOnInterrupt] - removes this plugin if interrupted by any user input\n     * @param {boolean} [options.forceStart] - starts the snap immediately regardless of whether the viewport is at\n     *   the desired location\n     * @return {Viewport} this\n     */\n    public snap(x: number, y: number, options?: ISnapOptions): Viewport\n    {\n        this.plugins.add('snap', new Snap(this, x, y, options));\n\n        return this;\n    }\n\n    /**\n     * Follow a target\n     *\n     * NOTES:\n     *    uses the (x, y) as the center to follow; for PIXI.Sprite to work properly, use sprite.anchor.set(0.5)\n     *    options.acceleration is not perfect as it doesn't know the velocity of the target. It adds acceleration\n     *    to the start of movement and deceleration to the end of movement when the target is stopped.\n     *    To cancel the follow, use: `viewport.plugins.remove('follow')`\n     *\n     * @fires 'moved' event\n     *\n     * @param {PIXI.DisplayObject} target to follow\n     * @param {IFollowOptions} [options]\n     * @param {number} [options.speed=0] - to follow in pixels/frame (0=teleport to location)\n     * @param {number} [options.acceleration] - set acceleration to accelerate and decelerate at this rate; speed\n     *   cannot be 0 to use acceleration\n     * @param {number} [options.radius] - radius (in world coordinates) of center circle where movement is allowed\n     *   without moving the viewport     * @returns {Viewport} this\n     * @returns {Viewport} this\n     */\n    public follow(target: DisplayObject, options?: IFollowOptions): Viewport\n    {\n        this.plugins.add('follow', new Follow(this, target, options));\n\n        return this;\n    }\n\n    /**\n     * Zoom using mouse wheel\n     *\n     * NOTE: the default event listener for 'wheel' event is document.body. Use `Viewport.options.divWheel` to\n     * change this default\n     *\n     * @param {IWheelOptions} [options]\n     * @param {number} [options.percent=0.1] - percent to scroll with each spin\n     * @param {number} [options.smooth] - smooth the zooming by providing the number of frames to zoom between wheel spins\n     * @param {boolean} [options.interrupt=true] - stop smoothing with any user input on the viewport\n     * @param {boolean} [options.reverse] - reverse the direction of the scroll\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of current mouse position\n     * @param {number} [options.lineHeight=20] - scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     * @param {('all'|'x'|'y')} [options.axis=all] - axis to zoom\n     * @return {Viewport} this\n     */\n    public wheel(options?: IWheelOptions): Viewport\n    {\n        this.plugins.add('wheel', new Wheel(this, options));\n\n        return this;\n    }\n\n    /**\n     * Animate the position and/or scale of the viewport\n     * To set the zoom level, use: (1) scale, (2) scaleX and scaleY, or (3) width and/or height\n     * @param {object} options\n     * @param {number} [options.time=1000] - time to animate\n     * @param {PIXI.Point} [options.position=viewport.center] - position to move viewport\n     * @param {number} [options.width] - desired viewport width in world pixels (use instead of scale;\n     *  aspect ratio is maintained if height is not provided)\n     * @param {number} [options.height] - desired viewport height in world pixels (use instead of scale;\n     *  aspect ratio is maintained if width is not provided)\n     * @param {number} [options.scale] - scale to change zoom (scale.x = scale.y)\n     * @param {number} [options.scaleX] - independently change zoom in x-direction\n     * @param {number} [options.scaleY] - independently change zoom in y-direction\n     * @param {(function|string)} [options.ease=linear] - easing function to use\n     * @param {function} [options.callbackOnComplete]\n     * @param {boolean} [options.removeOnInterrupt] removes this plugin if interrupted by any user input\n     * @returns {Viewport} this\n     */\n    public animate(options: IAnimateOptions): Viewport\n    {\n        this.plugins.add('animate', new Animate(this, options));\n\n        return this;\n    }\n\n    /**\n     * Enable clamping of zoom to constraints\n     *\n     * The minWidth/Height settings are how small the world can get (as it would appear on the screen)\n     * before clamping. The maxWidth/maxHeight is how larger the world can scale (as it would appear on\n     * the screen) before clamping.\n     *\n     * For example, if you have a world size of 1000 x 1000 and a screen size of 100 x 100, if you set\n     * minWidth/Height = 100 then the world will not be able to zoom smaller than the screen size (ie,\n     * zooming out so it appears smaller than the screen). Similarly, if you set maxWidth/Height = 100\n     * the world will not be able to zoom larger than the screen size (ie, zooming in so it appears\n     * larger than the screen).\n     *\n     * @param {object} [options]\n     * @param {number} [options.minWidth] - minimum width\n     * @param {number} [options.minHeight] - minimum height\n     * @param {number} [options.maxWidth] - maximum width\n     * @param {number} [options.maxHeight] - maximum height\n     * @param {number} [options.minScale] - minimum scale\n     * @param {number} [options.maxScale] - minimum scale\n     * @return {Viewport} this\n     */\n    public clampZoom(options: IClampZoomOptions): Viewport\n    {\n        this.plugins.add('clamp-zoom', new ClampZoom(this, options));\n\n        return this;\n    }\n\n    /**\n     * Scroll viewport when mouse hovers near one of the edges or radius-distance from center of screen.\n     *\n     * NOTES: fires 'moved' event; there's a known bug where the mouseEdges does not work properly with \"windowed\" viewports\n     *\n     * @param {IMouseEdgesOptions} [options]\n     * @param {number} [options.radius] - distance from center of screen in screen pixels\n     * @param {number} [options.distance] - distance from all sides in screen pixels\n     * @param {number} [options.top] - alternatively, set top distance (leave unset for no top scroll)\n     * @param {number} [options.bottom] - alternatively, set bottom distance (leave unset for no top scroll)\n     * @param {number} [options.left] - alternatively, set left distance (leave unset for no top scroll)\n     * @param {number} [options.right] - alternatively, set right distance (leave unset for no top scroll)\n     * @param {number} [options.speed=8] - speed in pixels/frame to scroll viewport\n     * @param {boolean} [options.reverse] - reverse direction of scroll\n     * @param {boolean} [options.noDecelerate] - don't use decelerate plugin even if it's installed\n     * @param {boolean} [options.linear] - if using radius, use linear movement (+/- 1, +/- 1) instead of angled\n     *   movement (Math.cos(angle from center), Math.sin(angle from center))\n     * @param {boolean} [options.allowButtons] allows plugin to continue working even when there's a mousedown event\n     */\n    public mouseEdges(options: IMouseEdgesOptions): Viewport\n    {\n        this.plugins.add('mouse-edges', new MouseEdges(this, options));\n\n        return this;\n    }\n\n    /** Pause viewport (including animation updates such as decelerate) */\n    get pause(): boolean\n    {\n        return !!this._pause;\n    }\n    set pause(value: boolean)\n    {\n        this._pause = value;\n\n        this.lastViewport = null;\n        this.moving = false;\n        this.zooming = false;\n\n        if (value)\n        {\n            this.input.pause();\n        }\n    }\n\n    /**\n     * Move the viewport so the bounding box is visible\n     *\n     * @param x - left\n     * @param y - top\n     * @param width\n     * @param height\n     * @param resizeToFit - Resize the viewport so the box fits within the viewport\n     */\n    public ensureVisible(x: number, y: number, width: number, height: number, resizeToFit?: boolean): void\n    {\n        if (resizeToFit && (width > this.worldScreenWidth || height > this.worldScreenHeight))\n        {\n            this.fit(true, width, height);\n            this.emit('zoomed', { viewport: this, type: 'ensureVisible' });\n        }\n        let moved = false;\n\n        if (x < this.left)\n        {\n            this.left = x;\n            moved = true;\n        }\n        else if (x + width > this.right)\n        {\n            this.right = x + width;\n            moved = true;\n        }\n        if (y < this.top)\n        {\n            this.top = y;\n            moved = true;\n        }\n        else if (y + height > this.bottom)\n        {\n            this.bottom = y + height;\n            moved = true;\n        }\n        if (moved)\n        {\n            this.emit('moved', { viewport: this, type: 'ensureVisible' });\n        }\n    }\n}\n\n/**\n * Fires after a mouse or touch click\n * @event Viewport#clicked\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a drag starts\n * @event Viewport#drag-start\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a drag ends\n * @event Viewport#drag-end\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a pinch starts\n * @event Viewport#pinch-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a pinch end\n * @event Viewport#pinch-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap starts\n * @event Viewport#snap-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap ends\n * @event Viewport#snap-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap-zoom starts\n * @event Viewport#snap-zoom-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap-zoom ends\n * @event Viewport#snap-zoom-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce starts in the x direction\n * @event Viewport#bounce-x-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce ends in the x direction\n * @event Viewport#bounce-x-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce starts in the y direction\n * @event Viewport#bounce-y-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce ends in the y direction\n * @event Viewport#bounce-y-end\n * @type {Viewport}\n */\n\n/**\n * Fires when for a mouse wheel event\n * @event Viewport#wheel-start\n * @type {object}\n * @property {WheelEvent} event\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a wheel-scroll occurs\n * @event Viewport#wheel-scroll\n * @type {Viewport}\n */\n\n/**\n * Fires when a mouse-edge starts to scroll\n * @event Viewport#mouse-edge-start\n * @type {Viewport}\n */\n\n/**\n * Fires when the mouse-edge scrolling ends\n * @event Viewport#mouse-edge-end\n * @type {Viewport}\n */\n\n/**\n * Fires when viewport moves through UI interaction, deceleration, ensureVisible, or follow\n * @event Viewport#moved\n * @type {object}\n * @property {Viewport} viewport\n * @property {string} type - (drag, snap, pinch, follow, bounce-x, bounce-y,\n *  clamp-x, clamp-y, decelerate, mouse-edges, wheel, ensureVisible)\n */\n\n/**\n * Fires when viewport moves through UI interaction, deceleration, ensureVisible, or follow\n * @event Viewport#zoomed\n * @type {object}\n * @property {Viewport} viewport\n * @property {string} type (drag-zoom, pinch, wheel, clamp-zoom, ensureVisible)\n */\n\n/**\n * Fires when viewport stops moving\n * @event Viewport#moved-end\n * @type {Viewport}\n */\n\n/**\n * Fires when viewport stops zooming\n * @event Viewport#zoomed-end\n * @type {Viewport}\n */\n\n/**\n* Fires at the end of an update frame\n* @event Viewport#frame-end\n* @type {Viewport}\n*/\n"]}