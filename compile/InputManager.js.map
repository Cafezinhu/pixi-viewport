{"version":3,"file":"InputManager.js","sourceRoot":"","sources":["../src/InputManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Point, Rectangle } from '@pixi/core';\n\nimport type { IPointData } from '@pixi/core';\nimport type {  FederatedPointerEvent } from '@pixi/events';\nimport type { Viewport } from './Viewport';\n\nexport interface IViewportTouch\n{\n    id: number;\n    last: IPointData | null;\n}\n\n/**\n * Handles all input for Viewport\n *\n * @internal\n * @ignore\n * @private\n */\nexport class InputManager\n{\n    public readonly viewport: Viewport;\n\n    public clickedAvailable?: boolean;\n    public isMouseDown?: boolean;\n    public last?: Point | null;\n    public wheelFunction?: (e: WheelEvent) => void;\n    /** List of active touches on viewport */\n    public touches: IViewportTouch[];\n\n    constructor(viewport: Viewport)\n    {\n        this.viewport = viewport;\n        this.touches = [];\n\n        this.addListeners();\n    }\n\n    /** Add input listeners */\n    private addListeners()\n    {\n        this.viewport.interactive = true;\n        if (!this.viewport.forceHitArea)\n        {\n            this.viewport.hitArea = new Rectangle(0, 0, this.viewport.worldWidth, this.viewport.worldHeight);\n        }\n        this.viewport.on('pointerdown', this.down, this);\n        this.viewport.on('pointermove', this.move, this);\n        this.viewport.on('pointerup', this.up, this);\n        this.viewport.on('pointerupoutside', this.up, this);\n        this.viewport.on('pointercancel', this.up, this);\n        this.viewport.on('pointerout', this.up, this);\n        this.wheelFunction = (e) => this.handleWheel(e);\n        this.viewport.options.divWheel.addEventListener(\n            'wheel',\n            this.wheelFunction as any,\n            { passive: this.viewport.options.passiveWheel });\n        this.isMouseDown = false;\n    }\n\n    /**\n     * Removes all event listeners from viewport\n     * (useful for cleanup of wheel when removing viewport)\n     */\n    public destroy(): void\n    {\n        this.viewport.options.divWheel.removeEventListener('wheel', this.wheelFunction as any);\n    }\n\n    /**\n     * handle down events for viewport\n     *\n     * @param {PIXI.FederatedPointerEvent} event\n     */\n    public down(event: FederatedPointerEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n        if (event.pointerType === 'mouse')\n        {\n            this.isMouseDown = true;\n        }\n        else if (!this.get(event.pointerId))\n        {\n            this.touches.push({ id: event.pointerId, last: null });\n        }\n        if (this.count() === 1)\n        {\n            this.last = event.global.clone();\n\n            // clicked event does not fire if viewport is decelerating or bouncing\n            const decelerate = this.viewport.plugins.get('decelerate', true);\n            const bounce = this.viewport.plugins.get('bounce', true);\n\n            if ((!decelerate || !decelerate.isActive()) && (!bounce || !bounce.isActive()))\n            {\n                this.clickedAvailable = true;\n            }\n            else\n            {\n                this.clickedAvailable = false;\n            }\n        }\n        else\n        {\n            this.clickedAvailable = false;\n        }\n\n        const stop = this.viewport.plugins.down(event);\n\n        if (stop && this.viewport.options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n    }\n\n    /** Clears all pointer events */\n    public clear(): void\n    {\n        this.isMouseDown = false;\n        this.touches = [];\n        this.last = null;\n    }\n\n    /**\n     * @param {number} change\n     * @returns whether change exceeds threshold\n     */\n    public checkThreshold(change: number): boolean\n    {\n        if (Math.abs(change) >= this.viewport.threshold)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /** Handle move events for viewport */\n    public move(event: FederatedPointerEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n\n        const stop = this.viewport.plugins.move(event);\n\n        if (this.clickedAvailable && this.last)\n        {\n            const distX = event.global.x - this.last.x;\n            const distY = event.global.y - this.last.y;\n\n            if (this.checkThreshold(distX) || this.checkThreshold(distY))\n            {\n                this.clickedAvailable = false;\n            }\n        }\n\n        if (stop && this.viewport.options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n    }\n\n    /** Handle up events for viewport */\n    public up(event: FederatedPointerEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n\n        if (event.pointerType === 'mouse')\n        {\n            this.isMouseDown = false;\n        }\n\n        if (event.pointerType !== 'mouse')\n        {\n            this.remove(event.pointerId);\n        }\n\n        const stop = this.viewport.plugins.up(event);\n\n        if (this.clickedAvailable && this.count() === 0 && this.last)\n        {\n            this.viewport.emit('clicked', {\n                event,\n                screen: this.last,\n                world: this.viewport.toWorld(this.last),\n                viewport: this.viewport\n            });\n            this.clickedAvailable = false;\n        }\n\n        if (stop && this.viewport.options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n    }\n\n    /** Gets pointer position if this.interaction is set */\n    public getPointerPosition(event: WheelEvent): Point\n    {\n        const point = new Point();\n\n        if (this.viewport.options.interaction)\n        {\n            this.viewport.options.interaction.mapPositionToPoint(point, event.clientX, event.clientY);\n        }\n        else if (this.viewport.options.useDivWheelForInputManager && this.viewport.options.divWheel)\n        {\n            const rect = this.viewport.options.divWheel.getBoundingClientRect();\n\n            point.x = event.clientX - rect.left;\n            point.y = event.clientY - rect.top;\n        }\n        else\n        {\n            point.x = event.clientX;\n            point.y = event.clientY;\n        }\n\n        return point;\n    }\n\n    /** Handle wheel events */\n    public handleWheel(event: WheelEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n\n        // do not handle events coming from other elements\n        if (this.viewport.options.interaction\n            && (this.viewport.options.interaction as any).interactionDOMElement !== event.target)\n        {\n            return;\n        }\n\n        // only handle wheel events where the mouse is over the viewport\n        const point = this.viewport.toLocal(this.getPointerPosition(event));\n\n        if (this.viewport.left <= point.x\n            && point.x <= this.viewport.right\n            && this.viewport.top <= point.y\n            && point.y <= this.viewport.bottom)\n        {\n            const stop = this.viewport.plugins.wheel(event);\n\n            if (stop && !this.viewport.options.passiveWheel)\n            {\n                event.preventDefault();\n            }\n        }\n    }\n\n    public pause(): void\n    {\n        this.touches = [];\n        this.isMouseDown = false;\n    }\n\n    /** Get touch by id */\n    public get(id: number): IViewportTouch | null\n    {\n        for (const touch of this.touches)\n        {\n            if (touch.id === id)\n            {\n                return touch;\n            }\n        }\n\n        return null;\n    }\n\n    /** Remove touch by number */\n    remove(id: number): void\n    {\n        for (let i = 0; i < this.touches.length; i++)\n        {\n            if (this.touches[i].id === id)\n            {\n                this.touches.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * @returns {number} count of mouse/touch pointers that are down on the viewport\n     */\n    count(): number\n    {\n        return (this.isMouseDown ? 1 : 0) + this.touches.length;\n    }\n}\n"]}