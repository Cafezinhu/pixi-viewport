{"version":3,"file":"Snap.js","sourceRoot":"","sources":["../../src/plugins/Snap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Viewport } from '../Viewport';\n\nexport interface ISnapOptions\n{\n    /** snap to the top-left of viewport instead of center */\n    topLeft?: boolean;\n\n    /**\n     * Friction/frame to apply if decelerate is active\n     *\n     * @default 0.8\n     */\n    friction?: number;\n\n    /**\n     * @default 1000\n     */\n    time?: number;\n\n    /** Easing function or name (see http://easings.net/ for supported names) */\n    ease?: any;\n\n    /**\n     * Pause snapping with any user input on the viewport\n     *\n     * @default true\n     */\n    interrupt?: boolean;\n\n    /**\n     * Removes this plugin after snapping is complete\n     *\n     * @default false\n     */\n    removeOnComplete?: boolean;\n\n    /**\n     * Removes this plugin if interrupted by any user input\n     *\n     * @default false\n     */\n    removeOnInterrupt?: boolean;\n\n    /**\n     * Starts the snap immediately regardless of whether the viewport is at the desired location\n     *\n     * @default false\n     */\n    forceStart?: boolean;\n}\n\nconst DEFAULT_SNAP_OPTIONS: Required<ISnapOptions> = {\n    topLeft: false,\n    friction: 0.8,\n    time: 1000,\n    ease: 'easeInOutSine',\n    interrupt: true,\n    removeOnComplete: false,\n    removeOnInterrupt: false,\n    forceStart: false\n};\n\n/**\n * @event snap-start(Viewport) emitted each time a snap animation starts\n * @event snap-restart(Viewport) emitted each time a snap resets because of a change in viewport size\n * @event snap-end(Viewport) emitted each time snap reaches its target\n * @event snap-remove(Viewport) emitted if snap plugin is removed\n */\nexport class Snap extends Plugin\n{\n    public readonly options: Required<ISnapOptions>;\n    public ease?: any;\n    public x: number;\n    public y: number;\n\n    protected percent?: number;\n    protected snapping?: { time: number } | null;\n    protected deltaX?: number;\n    protected deltaY?: number;\n    protected startX?: number;\n    protected startY?: number;\n\n    /**\n     * This is called by {@link Viewport.snap}.\n     */\n    constructor(parent: Viewport, x: number, y: number, options: ISnapOptions = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_SNAP_OPTIONS, options);\n        this.ease = ease(options.ease, 'easeInOutSine');\n        this.x = x;\n        this.y = y;\n\n        if (this.options.forceStart)\n        {\n            this.snapStart();\n        }\n    }\n\n    public snapStart(): void\n    {\n        this.percent = 0;\n        this.snapping = { time: 0 };\n        const current = this.options.topLeft ? this.parent.corner : this.parent.center;\n\n        this.deltaX = this.x - current.x;\n        this.deltaY = this.y - current.y;\n        this.startX = current.x;\n        this.startY = current.y;\n        this.parent.emit('snap-start', this.parent);\n    }\n\n    public wheel(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap');\n        }\n\n        return false;\n    }\n\n    public down(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap');\n        }\n        else if (this.options.interrupt)\n        {\n            this.snapping = null;\n        }\n\n        return false;\n    }\n\n    public up(): boolean\n    {\n        if (this.parent.input.count() === 0)\n        {\n            const decelerate = this.parent.plugins.get('decelerate', true);\n\n            if (decelerate && (decelerate.x || decelerate.y))\n            {\n                decelerate.percentChangeX = decelerate.percentChangeY = this.options.friction;\n            }\n        }\n\n        return false;\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n        if (this.options.interrupt && this.parent.input.count() !== 0)\n        {\n            return;\n        }\n        if (!this.snapping)\n        {\n            const current = this.options.topLeft ? this.parent.corner : this.parent.center;\n\n            if (current.x !== this.x || current.y !== this.y)\n            {\n                this.snapStart();\n            }\n        }\n        else\n        {\n            const snapping = this.snapping;\n\n            snapping.time += elapsed;\n            let finished;\n            let x;\n            let y;\n\n            const startX = this.startX as number;\n            const startY = this.startY as number;\n            const deltaX = this.deltaX as number;\n            const deltaY = this.deltaY as number;\n\n            if (snapping.time > this.options.time)\n            {\n                finished = true;\n                x = startX + deltaX;\n                y = startY + deltaY;\n            }\n            else\n            {\n                const percent = this.ease(snapping.time, 0, 1, this.options.time);\n\n                x = startX + (deltaX * percent);\n                y = startY + (deltaY * percent);\n            }\n            if (this.options.topLeft)\n            {\n                this.parent.moveCorner(x, y);\n            }\n            else\n            {\n                this.parent.moveCenter(x, y);\n            }\n\n            this.parent.emit('moved', { viewport: this.parent, type: 'snap' });\n\n            if (finished)\n            {\n                if (this.options.removeOnComplete)\n                {\n                    this.parent.plugins.remove('snap');\n                }\n                this.parent.emit('snap-end', this.parent);\n                this.snapping = null;\n            }\n        }\n    }\n}\n"]}