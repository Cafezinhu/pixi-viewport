{"version":3,"file":"Animate.js","sourceRoot":"","sources":["../../src/plugins/Animate.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,KAAK,EAAE,MAAM,YAAY,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,IAAI,MAAM,SAAS,CAAC;AA8C3B,MAAM,uBAAuB,GAAG;IAC5B,iBAAiB,EAAE,KAAK;IACxB,IAAI,EAAE,QAAQ;IACd,IAAI,EAAE,IAAI;CACb,CAAC;AAQF,MAAM,OAAO,OAAQ,SAAQ,MAAM;IA8C/B,YAAY,MAAgB,EAAE,UAA2B,EAAE;QAEvD,KAAK,CAAC,MAAM,CAAC,CAAC;QA5BR,eAAU,GAAkB,IAAI,CAAC;QAGjC,gBAAW,GAAkB,IAAI,CAAC;QAGlC,eAAU,GAAkB,IAAI,CAAC;QAGjC,gBAAW,GAAkB,IAAI,CAAC;QAGlC,UAAK,GAAkB,IAAI,CAAC;QAG5B,WAAM,GAAkB,IAAI,CAAC;QAG7B,SAAI,GAAG,CAAC,CAAC;QAYf,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,uBAAuB,EAAE,OAAO,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE5C,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAClB,CAAC;IAOS,aAAa;QAEnB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,WAAW,EAChD;YACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SAC3B;aAED;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;IACL,CAAC;IAOS,SAAS;QAEf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,WAAW,EAC7C;YACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;SAC7D;aACI,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,WAAW,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,WAAW,EACjG;YACI,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,WAAW,EAC9C;gBAEI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAC9D;YACD,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,WAAW,EAC9C;gBACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAChE;SACJ;aAED;YACI,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,WAAW,EAC7C;gBACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aACnC;YACD,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,WAAW,EAC9C;gBACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aACrC;SACJ;QAED,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACvB;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC;YACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;SAClD;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EACxB;YACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC;YACzD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;SACrD;IACL,CAAC;IAEM,IAAI;QAEP,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAClC;YACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SACzC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ;QAEX,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACtC,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACvB;YACI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC;SAC3E;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EACxB;YACI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;SAC5E;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAC7C;YACI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAE7C,IAAI,IAAI,CAAC,OAAO,CAAC,kBAAkB,EACnC;YACI,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAChD;IACL,CAAC;IAEM,MAAM,CAAC,OAAe;QAEzB,IAAI,IAAI,CAAC,MAAM,EACf;YACI,OAAO;SACV;QACD,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC;QAErB,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEzE,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAClC;YACI,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACxC,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAE1C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,aAAa,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,cAAc,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EAChF;gBACI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;aAClG;SACJ;aAED;YACI,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEtE,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACvB;gBACI,MAAM,UAAU,GAAG,IAAI,CAAC,UAAoB,CAAC;gBAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,UAAoB,CAAC;gBAE7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAChB,UAAU,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,EACnC,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC;aAC7B;YACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EACxB;gBACI,MAAM,WAAW,GAAG,IAAI,CAAC,WAAqB,CAAC;gBAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,WAAqB,CAAC;gBAE/C,IAAI,CAAC,MAAM,CAAC,SAAS,CACjB,WAAW,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,EACrC,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;aAC5B;YACD,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACvB;gBACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7C;iBACI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAC7B;gBACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7C;YACD,IAAI,CAAC,IAAI,CAAC,UAAU,EACpB;gBACI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAgB,CAAC;gBACrC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAgB,CAAC;gBACrC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAgB,CAAC;gBACrC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAgB,CAAC;gBACrC,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEzD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,EAAE,MAAM,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;aACnF;YACD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,EAC7B;gBACI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;aAClG;SACJ;IACL,CAAC;CACJ","sourcesContent":["import { IPointData, Point } from '@pixi/core';\nimport { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Animate}. */\nexport interface IAnimateOptions\n{\n    /** Time to animate */\n    time?: number;\n\n    /** Position to move the viewport to */\n    position?: IPointData;\n\n    /**\n     * Desired viewport width in world pixels\n     *\n     * (use instead of scale; aspect ratio is maintained if height is not provided)\n     */\n    width?: number;\n\n    /**\n     * Desired viewport height in world pixels\n     *\n     * (use instead of scale; aspect ratio is maintained if width is not provided)\n     */\n    height?: number;\n\n    /** Scale to change zoom (scale.x = scale.y) */\n    scale?: number;\n\n    /** Independently change zoom in x-direction */\n    scaleX?: number;\n\n    /** Independently change zoom in y-direction */\n    scaleY?: number;\n\n    /** Easing function to use */\n    ease?: any;\n\n    /** Callback to invoke when the animation completes */\n    callbackOnComplete?: (viewport: Viewport) => void;\n\n    /** Removes this plugin if interrupted by any user input */\n    removeOnInterrupt?: boolean;\n}\n\nconst DEFAULT_ANIMATE_OPTIONS = {\n    removeOnInterrupt: false,\n    ease: 'linear',\n    time: 1000,\n};\n\n/**\n * Animation plugin.\n *\n * @see Viewport#animate\n * @fires animate-end\n */\nexport class Animate extends Plugin\n{\n    public readonly options: IAnimateOptions & { ease: any; time: number };\n\n    /** The starting x-coordinate of the viewport. */\n    protected startX?: number;\n\n    /** The starting y-coordinate of the viewport. */\n    protected startY?: number;\n\n    /** The change in the x-coordinate of the viewport through the animation.*/\n    protected deltaX?: number;\n\n    /** The change in the y-coordinate of the viewport through the animation. */\n    protected deltaY?: number;\n\n    /** Marks whether the center of the viewport is preserved in the animation. */\n    protected keepCenter!: boolean;\n\n    /** The starting viewport width. */\n    protected startWidth: number | null = null;\n\n    /** The starting viewport height. */\n    protected startHeight: number | null = null;\n\n    /** The change in the viewport's width through the animation. */\n    protected deltaWidth: number | null = null;\n\n    /** The change in the viewport's height through the animation. */\n    protected deltaHeight: number | null = null;\n\n    /** The viewport's width post-animation. */\n    protected width: number | null = null;\n\n    /** The viewport's height post-animation. */\n    protected height: number | null = null;\n\n    /** The time since the animation started. */\n    protected time = 0;\n\n    /**\n     * This is called by {@link Viewport.animate}.\n     *\n     * @param parent\n     * @param options\n     */\n    constructor(parent: Viewport, options: IAnimateOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_ANIMATE_OPTIONS, options);\n        this.options.ease = ease(this.options.ease);\n\n        this.setupPosition();\n        this.setupZoom();\n\n        this.time = 0;\n    }\n\n    /**\n     * Setup `startX`, `startY`, `deltaX`, `deltaY`, `keepCenter`.\n     *\n     * This is called during construction.\n     */\n    protected setupPosition(): void\n    {\n        if (typeof this.options.position !== 'undefined')\n        {\n            this.startX = this.parent.center.x;\n            this.startY = this.parent.center.y;\n            this.deltaX = this.options.position.x - this.parent.center.x;\n            this.deltaY = this.options.position.y - this.parent.center.y;\n            this.keepCenter = false;\n        }\n        else\n        {\n            this.keepCenter = true;\n        }\n    }\n\n    /**\n     * Setup `startWidth, `startHeight`, `deltaWidth, `deltaHeight, `width`, `height`.\n     *\n     * This is called during construction.\n     */\n    protected setupZoom(): void\n    {\n        this.width = null;\n        this.height = null;\n\n        if (typeof this.options.scale !== 'undefined')\n        {\n            this.width = this.parent.screenWidth / this.options.scale;\n        }\n        else if (typeof this.options.scaleX !== 'undefined' || typeof this.options.scaleY !== 'undefined')\n        {\n            if (typeof this.options.scaleX !== 'undefined')\n            {\n                // screenSizeInWorldPixels = screenWidth / scale\n                this.width = this.parent.screenWidth / this.options.scaleX;\n            }\n            if (typeof this.options.scaleY !== 'undefined')\n            {\n                this.height = this.parent.screenHeight / this.options.scaleY;\n            }\n        }\n        else\n        {\n            if (typeof this.options.width !== 'undefined')\n            {\n                this.width = this.options.width;\n            }\n            if (typeof this.options.height !== 'undefined')\n            {\n                this.height = this.options.height;\n            }\n        }\n\n        if (this.width !== null)\n        {\n            this.startWidth = this.parent.screenWidthInWorldPixels;\n            this.deltaWidth = this.width - this.startWidth;\n        }\n        if (this.height !== null)\n        {\n            this.startHeight = this.parent.screenHeightInWorldPixels;\n            this.deltaHeight = this.height - this.startHeight;\n        }\n    }\n\n    public down(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('animate');\n        }\n\n        return false;\n    }\n\n    public complete(): void\n    {\n        this.parent.plugins.remove('animate');\n        if (this.width !== null)\n        {\n            this.parent.fitWidth(this.width, this.keepCenter, this.height === null);\n        }\n        if (this.height !== null)\n        {\n            this.parent.fitHeight(this.height, this.keepCenter, this.width === null);\n        }\n        if (!this.keepCenter && this.options.position)\n        {\n            this.parent.moveCenter(this.options.position);\n        }\n\n        this.parent.emit('animate-end', this.parent);\n\n        if (this.options.callbackOnComplete)\n        {\n            this.options.callbackOnComplete(this.parent);\n        }\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n        this.time += elapsed;\n\n        const originalZoom = new Point(this.parent.scale.x, this.parent.scale.y);\n\n        if (this.time >= this.options.time)\n        {\n            const originalWidth = this.parent.width;\n            const originalHeight = this.parent.height;\n\n            this.complete();\n            if (originalWidth !== this.parent.width || originalHeight !== this.parent.height)\n            {\n                this.parent.emit('zoomed', { viewport: this.parent, original: originalZoom, type: 'animate' });\n            }\n        }\n        else\n        {\n            const percent = this.options.ease(this.time, 0, 1, this.options.time);\n\n            if (this.width !== null)\n            {\n                const startWidth = this.startWidth as number;\n                const deltaWidth = this.deltaWidth as number;\n\n                this.parent.fitWidth(\n                    startWidth + (deltaWidth * percent),\n                    this.keepCenter,\n                    this.height === null);\n            }\n            if (this.height !== null)\n            {\n                const startHeight = this.startHeight as number;\n                const deltaHeight = this.deltaHeight as number;\n\n                this.parent.fitHeight(\n                    startHeight + (deltaHeight * percent),\n                    this.keepCenter,\n                    this.width === null);\n            }\n            if (this.width === null)\n            {\n                this.parent.scale.x = this.parent.scale.y;\n            }\n            else if (this.height === null)\n            {\n                this.parent.scale.y = this.parent.scale.x;\n            }\n            if (!this.keepCenter)\n            {\n                const startX = this.startX as number;\n                const startY = this.startY as number;\n                const deltaX = this.deltaX as number;\n                const deltaY = this.deltaY as number;\n                const original = new Point(this.parent.x, this.parent.y);\n\n                this.parent.moveCenter(startX + (deltaX * percent), startY + (deltaY * percent));\n                this.parent.emit('moved', { viewport: this.parent, original, type: 'animate' });\n            }\n            if (this.width || this.height)\n            {\n                this.parent.emit('zoomed', { viewport: this.parent, original: originalZoom, type: 'animate' });\n            }\n        }\n    }\n}\n"]}