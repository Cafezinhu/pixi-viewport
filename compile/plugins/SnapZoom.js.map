{"version":3,"file":"SnapZoom.js","sourceRoot":"","sources":["../../src/plugins/SnapZoom.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Point } from '@pixi/core';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link SnapZoom}. */\nexport interface ISnapZoomOptions\n{\n    /** the desired width to snap (to maintain aspect ratio, choose only width or height) */\n    width?: number;\n\n    /** the desired height to snap (to maintain aspect ratio, choose only width or height) */\n    height?: number;\n\n    /**\n     * time for snapping in ms\n     *\n     * @default 1000\n     */\n    time?: number;\n\n    /** ease function or name (see http://easings.net/ for supported names) */\n    ease?: any;\n\n    /** Place this point at center during zoom instead of center of the viewport */\n    center?: Point | null;\n\n    /**\n     * Pause snapping with any user input on the viewport\n     *\n     * @default true\n     */\n    interrupt?: boolean;\n\n    /**\n     * Removes this plugin after snapping is complete\n     *\n     * @default false\n     */\n    removeOnComplete?: boolean;\n\n    /**\n     * Removes this plugin if interrupted by any user input\n     *\n     * @default false\n     */\n    removeOnInterrupt?: boolean;\n\n    /**\n     * Starts the snap immediately regardless of whether the viewport is at the desired zoom\n     *\n     * @default false\n     */\n    forceStart?: boolean;\n\n    /**\n     * Zoom but do not move\n     *\n     * @default false\n     */\n    noMove?: boolean;\n}\n\nconst DEFAULT_SNAP_ZOOM_OPTIONS: Required<ISnapZoomOptions> = {\n    width: 0,\n    height: 0,\n    time: 1000,\n    ease: 'easeInOutSine',\n    center: null,\n    interrupt: true,\n    removeOnComplete: false,\n    removeOnInterrupt: false,\n    forceStart: false,\n    noMove: false\n};\n\n/**\n * @event snap-zoom-start(Viewport) emitted each time a fit animation starts\n * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\n * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\n */\nexport class SnapZoom extends Plugin\n{\n    public readonly options: Required<ISnapZoomOptions>;\n\n    protected ease: any;\n    protected xScale: number;\n    protected yScale: number;\n    protected xIndependent: boolean;\n    protected yIndependent: boolean;\n    protected snapping?: {\n        time: number;\n        startX: number;\n        startY: number;\n        deltaX: number;\n        deltaY: number;\n    } | null;\n\n    /**\n     * This is called by {@link Viewport.snapZoom}.\n     */\n    constructor(parent: Viewport, options: ISnapZoomOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_SNAP_ZOOM_OPTIONS, options);\n        this.ease = ease(this.options.ease);\n\n        // Assign defaults for typescript.\n        this.xIndependent = false;\n        this.yIndependent = false;\n        this.xScale = 0;\n        this.yScale = 0;\n\n        if (this.options.width > 0)\n        {\n            this.xScale = parent.screenWidth / this.options.width;\n            this.xIndependent = true;\n        }\n        if (this.options.height > 0)\n        {\n            this.yScale = parent.screenHeight / this.options.height;\n            this.yIndependent = true;\n        }\n\n        this.xScale = this.xIndependent ? (this.xScale as number) : (this.yScale as number);\n        this.yScale = this.yIndependent ? (this.yScale as number) : this.xScale;\n\n        if (this.options.time === 0)\n        {\n            // TODO: Fix this\n            // @ts-expect-error todo\n            parent.container.scale.x = this.xScale;\n\n            // TODO: Fix this\n            // @ts-expect-error todo\n            parent.container.scale.y = this.yScale;\n\n            if (this.options.removeOnComplete)\n            {\n                this.parent.plugins.remove('snap-zoom');\n            }\n        }\n        else if (options.forceStart)\n        {\n            this.createSnapping();\n        }\n    }\n\n    private createSnapping(): void\n    {\n        const startWorldScreenWidth = this.parent.worldScreenWidth;\n        const startWorldScreenHeight = this.parent.worldScreenHeight;\n        const endWorldScreenWidth = this.parent.screenWidth / this.xScale;\n        const endWorldScreenHeight = this.parent.screenHeight / this.yScale;\n\n        this.snapping = {\n            time: 0,\n            startX: startWorldScreenWidth,\n            startY: startWorldScreenHeight,\n            deltaX: endWorldScreenWidth - startWorldScreenWidth,\n            deltaY: endWorldScreenHeight - startWorldScreenHeight\n        };\n\n        this.parent.emit('snap-zoom-start', this.parent);\n    }\n\n    public resize(): void\n    {\n        this.snapping = null;\n\n        if (this.options.width > 0)\n        {\n            this.xScale = this.parent.screenWidth / this.options.width;\n        }\n        if (this.options.height > 0)\n        {\n            this.yScale = this.parent.screenHeight / this.options.height;\n        }\n        this.xScale = this.xIndependent ? this.xScale : this.yScale;\n        this.yScale = this.yIndependent ? this.yScale : this.xScale;\n    }\n\n    public wheel(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap-zoom');\n        }\n\n        return false;\n    }\n\n    public down(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap-zoom');\n        }\n        else if (this.options.interrupt)\n        {\n            this.snapping = null;\n        }\n\n        return false;\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n        if (this.options.interrupt && this.parent.input.count() !== 0)\n        {\n            return;\n        }\n\n        let oldCenter: Point | undefined;\n\n        if (!this.options.center && !this.options.noMove)\n        {\n            oldCenter = this.parent.center;\n        }\n        if (!this.snapping)\n        {\n            if (this.parent.scale.x !== this.xScale || this.parent.scale.y !== this.yScale)\n            {\n                this.createSnapping();\n            }\n        }\n        else if (this.snapping)\n        {\n            const snapping = this.snapping;\n\n            snapping.time += elapsed;\n\n            if (snapping.time >= this.options.time)\n            {\n                this.parent.scale.set(this.xScale, this.yScale);\n                if (this.options.removeOnComplete)\n                {\n                    this.parent.plugins.remove('snap-zoom');\n                }\n                this.parent.emit('snap-zoom-end', this.parent);\n                this.snapping = null;\n            }\n            else\n            {\n                const snapping = this.snapping;\n                const worldScreenWidth = this.ease(snapping.time, snapping.startX, snapping.deltaX, this.options.time);\n                const worldScreenHeight = this.ease(snapping.time, snapping.startY, snapping.deltaY, this.options.time);\n\n                this.parent.scale.x = this.parent.screenWidth / worldScreenWidth;\n                this.parent.scale.y = this.parent.screenHeight / worldScreenHeight;\n            }\n            const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n            if (clamp)\n            {\n                clamp.clamp();\n            }\n            if (!this.options.noMove)\n            {\n                if (!this.options.center)\n                {\n                    this.parent.moveCenter(oldCenter as Point);\n                }\n                else\n                {\n                    this.parent.moveCenter(this.options.center);\n                }\n            }\n        }\n    }\n\n    public resume(): void\n    {\n        this.snapping = null;\n        super.resume();\n    }\n}\n"]}