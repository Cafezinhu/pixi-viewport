{"version":3,"file":"Decelerate.js","sourceRoot":"","sources":["../../src/plugins/Decelerate.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from './Plugin';\n\nimport type { Viewport } from '../Viewport';\nimport { MovedEvent } from '../types';\n\nexport interface IDecelerateOptions\n{\n    /**\n     * Percent to decelerate after movement. This should be between 0 and 1, exclusive.\n     *\n     * @default 0.95\n     */\n    friction?: number;\n\n    /**\n     * Percent to decelerate when past boundaries (only applicable when viewport.bounce() is active)\n     *\n     * @default 0.8\n     */\n    bounce?: number;\n\n    /**\n     * Minimum velocity before stopping/reversing acceleration\n     *\n     * @default 0.01\n     */\n    minSpeed?: number;\n}\n\n/** Viewport position snapshot that's saved by {@link DeceleratePlugin} to estimate panning velocity. */\nexport interface IDecelerateSnapshot\n{\n    /** x-coordinate of the viewport. */\n    x: number;\n\n    /** y-coordinate of the viewport. */\n    y: number;\n\n    /** Time at which this snapshot was taken. */\n    time: number;\n}\n\nconst DEFAULT_DECELERATE_OPTIONS: Required<IDecelerateOptions> = {\n    friction: 0.98,\n    bounce: 0.8,\n    minSpeed: 0.01\n};\n\n/**\n * Time period of decay (1 frame)\n *\n * @internal\n * @ignore\n */\nconst TP = 16;\n\n/**\n * Plugin to decelerate viewport velocity smoothly after panning ends.\n *\n * @public\n */\nexport class Decelerate extends Plugin\n{\n    /** Options used to initialize this plugin. */\n    public readonly options: Required<IDecelerateOptions>;\n\n    /**\n     * x-component of the velocity of viewport provided by this plugin, at the current time.\n     *\n     * This is measured in px/frame, where a frame is normalized to 16 milliseconds.\n     */\n    public x!: number | null;\n\n    /**\n     * y-component of the velocity of the viewport provided by this plugin, at the current time.\n     *\n     * This is measured in px/frame, where a frame is normalized to 16 milliseconds.\n     */\n    public y!: number | null;\n\n    /**\n     * The decay factor for the x-component of the viewport.\n     *\n     * The viewport's velocity decreased by this amount each 16 milliseconds.\n     */\n    public percentChangeX!: number;\n\n    /**\n     * The decay factor for the y-component of the viewport.\n     *\n     * The viewport's velocity decreased by this amount each 16 milliseconds.\n     */\n    public percentChangeY!: number;\n\n    /** Saved list of recent viewport position snapshots, to estimate velocity. */\n    protected saved: Array<IDecelerateSnapshot>;\n\n    /** The time since the user released panning of the viewport. */\n    protected timeSinceRelease: number;\n\n    /**\n     * This is called by {@link Viewport.decelerate}.\n     */\n    constructor(parent: Viewport, options: IDecelerateOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_DECELERATE_OPTIONS, options);\n        this.saved = [];\n        this.timeSinceRelease = 0;\n\n        this.reset();\n        this.parent.on('moved', (data) => this.handleMoved(data));\n    }\n\n    public down(): boolean\n    {\n        this.saved = [];\n        this.x = this.y = null;\n\n        return false;\n    }\n\n    public isActive(): boolean\n    {\n        return !!(this.x || this.y);\n    }\n\n    public move(): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n\n        const count = this.parent.input.count();\n\n        if (count === 1 || (count > 1 && !this.parent.plugins.get('pinch', true)))\n        {\n            this.saved.push({ x: this.parent.x, y: this.parent.y, time: performance.now() });\n\n            if (this.saved.length > 60)\n            {\n                this.saved.splice(0, 30);\n            }\n        }\n\n        // Silently recording viewport positions\n        return false;\n    }\n\n    /** Listener to viewport's \"moved\" event. */\n    protected handleMoved(e: MovedEvent): void\n    {\n        if (this.saved.length)\n        {\n            const last = this.saved[this.saved.length - 1];\n\n            if (e.type === 'clamp-x' && e.original)\n            {\n                if (last.x === e.original.x)\n                {\n                    last.x = this.parent.x;\n                }\n            }\n            else if (e.type === 'clamp-y' && e.original)\n            {\n                if (last.y === e.original.y)\n                {\n                    last.y = this.parent.y;\n                }\n            }\n        }\n    }\n\n    public up(): boolean\n    {\n        if (this.parent.input.count() === 0 && this.saved.length)\n        {\n            const now = performance.now();\n\n            for (const save of this.saved)\n            {\n                if (save.time >= now - 100)\n                {\n                    const time = now - save.time;\n\n                    this.x = (this.parent.x - save.x) / time;\n                    this.y = (this.parent.y - save.y) / time;\n                    this.percentChangeX = this.percentChangeY = this.options.friction;\n                    this.timeSinceRelease = 0;\n                    break;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Manually activate deceleration, starting from the (x, y) velocity components passed in the options.\n     *\n     * @param {object} options\n     * @param {number} [options.x] - Specify x-component of initial velocity.\n     * @param {number} [options.y] - Specify y-component of initial velocity.\n     */\n    public activate(options: { x?: number; y?: number; }): void\n    {\n        options = options || {};\n\n        if (typeof options.x !== 'undefined')\n        {\n            this.x = options.x;\n            this.percentChangeX = this.options.friction;\n        }\n        if (typeof options.y !== 'undefined')\n        {\n            this.y = options.y;\n            this.percentChangeY = this.options.friction;\n        }\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        /*\n         * See https://github.com/davidfig/pixi-viewport/issues/271 for math.\n         *\n         * The viewport velocity (this.x, this.y) decays exponentially by the the decay factor\n         * (this.percentChangeX, this.percentChangeY) each frame. This velocity function is integrated\n         * to calculate the displacement.\n         */\n\n        const moved = this.x || this.y;\n\n        const ti = this.timeSinceRelease;\n        const tf = this.timeSinceRelease + elapsed;\n\n        if (this.x)\n        {\n            const k = this.percentChangeX;\n            const lnk = Math.log(k);\n\n            // Apply velocity delta on the viewport x-coordinate.\n            this.parent.x += ((this.x * TP) / lnk) * (Math.pow(k, tf / TP) - Math.pow(k, ti / TP));\n\n            // Apply decay on x-component of velocity\n            this.x *= Math.pow(this.percentChangeX, elapsed / TP);\n        }\n        if (this.y)\n        {\n            const k = this.percentChangeY;\n            const lnk = Math.log(k);\n\n            // Apply velocity delta on the viewport y-coordinate.\n            this.parent.y += ((this.y * TP) / lnk) * (Math.pow(k, tf / TP) - Math.pow(k, ti / TP));\n\n            // Apply decay on y-component of velocity\n            this.y *= Math.pow(this.percentChangeY, elapsed / TP);\n        }\n\n        this.timeSinceRelease += elapsed;\n\n        // End decelerate velocity once it goes under a certain amount of precision.\n        if (this.x && this.y)\n        {\n            if (Math.abs(this.x) < this.options.minSpeed && Math.abs(this.y) < this.options.minSpeed)\n            {\n                this.x = 0;\n                this.y = 0;\n            }\n        }\n        else\n        {\n            if (Math.abs(this.x || 0) < this.options.minSpeed)\n            {\n                this.x = 0;\n            }\n            if (Math.abs(this.y || 0) < this.options.minSpeed)\n            {\n                this.y = 0;\n            }\n        }\n\n        if (moved)\n        {\n            this.parent.emit('moved', { viewport: this.parent, type: 'decelerate' });\n        }\n    }\n\n    public reset(): void\n    {\n        this.x = this.y = null;\n    }\n}\n"]}