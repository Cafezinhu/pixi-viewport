{"version":3,"file":"Pinch.js","sourceRoot":"","sources":["../../src/plugins/Pinch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from './Plugin';\nimport { Point } from '@pixi/core';\n\nimport type { IPointData } from '@pixi/core';\nimport type { FederatedPointerEvent } from '@pixi/events';\nimport type { IViewportTouch } from '../InputManager';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Pinch}. */\nexport interface IPinchOptions\n{\n    /** Disable two-finger dragging. */\n    noDrag?: boolean;\n\n    /**\n     * Percent to modify pinch speed.\n     *\n     * @default 1\n     */\n    percent?: number;\n\n    /**\n     * Factor to multiply two-finger drag to increase speed of movement\n     *\n     * @default 1\n     */\n    factor?: number;\n\n    /** Place this point at center during zoom instead of center of two fingers */\n    center?: Point | null;\n\n    /** Axis to zoom */\n    axis?: 'all' | 'x' | 'y';\n}\n\nconst DEFAULT_PINCH_OPTIONS: Required<IPinchOptions> = {\n    noDrag: false,\n    percent: 1,\n    center: null,\n    factor: 1,\n    axis: 'all',\n};\n\n/**\n * Plugin for enabling two-finger pinching (or dragging).\n *\n * @public\n */\nexport class Pinch extends Plugin\n{\n    /** Options used to initialize this plugin. */\n    public readonly options: Required<IPinchOptions>;\n\n    /** Flags whether this plugin is active, i.e. a pointer is down on the viewport. */\n    public active = false;\n\n    /** Flags whether the viewport is being pinched. */\n    public pinching = false;\n\n    protected moved = false;\n    protected lastCenter?: IPointData | null;\n\n    /**\n     * This is called by {@link Viewport.pinch}.\n     */\n    constructor(parent: Viewport, options: IPinchOptions = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_PINCH_OPTIONS, options);\n    }\n\n    public down(): boolean\n    {\n        if (this.parent.input.count() >= 2)\n        {\n            this.active = true;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public isAxisX(): boolean\n    {\n        return ['all', 'x'].includes(this.options.axis);\n    }\n\n    public isAxisY(): boolean\n    {\n        return ['all', 'y'].includes(this.options.axis);\n    }\n\n    public move(e: FederatedPointerEvent): boolean\n    {\n        if (this.paused || !this.active)\n        {\n            return false;\n        }\n\n        const x = e.global.x;\n        const y = e.global.y;\n\n        const pointers = this.parent.input.touches;\n\n        if (pointers.length >= 2)\n        {\n            const first = pointers[0] as IViewportTouch;\n            const second = pointers[1] as IViewportTouch;\n            const last = (first.last && second.last)\n                ? Math.sqrt(Math.pow(second.last.x - first.last.x, 2) + Math.pow(second.last.y - first.last.y, 2))\n                : null;\n\n            if (first.id === e.pointerId)\n            {\n                first.last = { x, y, data: e } as IPointData;\n            }\n            else if (second.id === e.pointerId)\n            {\n                second.last = { x, y, data: e } as IPointData;\n            }\n            if (last)\n            {\n                let oldPoint: IPointData | undefined;\n\n                const point = new Point(\n                    (first.last as IPointData).x + (((second.last as IPointData).x - (first.last as IPointData).x) / 2),\n                    (first.last as IPointData).y + (((second.last as IPointData).y - (first.last as IPointData).y) / 2),\n                );\n\n                if (!this.options.center)\n                {\n                    oldPoint = this.parent.toLocal(point);\n                }\n                let dist = Math.sqrt(Math.pow(\n                    (second.last as IPointData).x - (first.last as IPointData).x, 2)\n                    + Math.pow((second.last as IPointData).y - (first.last as IPointData).y, 2));\n\n                dist = dist === 0 ? dist = 0.0000000001 : dist;\n\n                const change = (1 - (last / dist)) * this.options.percent\n                    * (this.isAxisX() ? this.parent.scale.x : this.parent.scale.y);\n\n                if (this.isAxisX())\n                {\n                    this.parent.scale.x += change;\n                }\n                if (this.isAxisY())\n                {\n                    this.parent.scale.y += change;\n                }\n\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'pinch', center: point });\n\n                const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n                if (clamp)\n                {\n                    clamp.clamp();\n                }\n                if (this.options.center)\n                {\n                    this.parent.moveCenter(this.options.center);\n                }\n                else\n                {\n                    const newPoint = this.parent.toGlobal(oldPoint as IPointData);\n\n                    this.parent.x += (point.x - newPoint.x) * this.options.factor;\n                    this.parent.y += (point.y - newPoint.y) * this.options.factor;\n                    this.parent.emit('moved', { viewport: this.parent, type: 'pinch' });\n                }\n                if (!this.options.noDrag && this.lastCenter)\n                {\n                    this.parent.x += (point.x - this.lastCenter.x) * this.options.factor;\n                    this.parent.y += (point.y - this.lastCenter.y) * this.options.factor;\n                    this.parent.emit('moved', { viewport: this.parent, type: 'pinch' });\n                }\n\n                this.lastCenter = point;\n                this.moved = true;\n            }\n            else if (!this.pinching)\n            {\n                this.parent.emit('pinch-start', this.parent);\n                this.pinching = true;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public up(): boolean\n    {\n        if (this.pinching)\n        {\n            if (this.parent.input.touches.length <= 1)\n            {\n                this.active = false;\n                this.lastCenter = null;\n                this.pinching = false;\n                this.moved = false;\n                this.parent.emit('pinch-end', this.parent);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"]}