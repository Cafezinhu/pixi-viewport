{"version":3,"file":"PluginManager.js","sourceRoot":"","sources":["../src/PluginManager.ts"],"names":[],"mappings":"AAkBA,MAAM,YAAY,GAAG;IACjB,MAAM;IACN,OAAO;IACP,OAAO;IACP,QAAQ;IACR,aAAa;IACb,YAAY;IACZ,SAAS;IACT,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,MAAM;IACN,OAAO;CACV,CAAC;AAOF,MAAM,OAAO,aAAa;IAgBtB,YAAY,QAAkB;QAE1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;IAWM,GAAG,CAAC,IAAY,EAAE,MAAc,EAAE,QAAgB,YAAY,CAAC,MAAM;QAExE,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAErC,IAAI,SAAS,EACb;YACI,SAAS,CAAC,OAAO,EAAE,CAAC;SACvB;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;QAE5B,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE3C,IAAI,OAAO,KAAK,CAAC,CAAC,EAClB;YACI,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACnC;QAED,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAsBM,GAAG,CAA4B,IAAY,EAAE,YAAsB;;QAEtE,IAAI,YAAY,EAChB;YACI,IAAI,MAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,0CAAE,MAAM,EAC9B;gBACI,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAM,CAAC;IACnC,CAAC;IASM,MAAM,CAAC,OAAe;QAEzB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,EAC9B;YACI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC1B;IACL,CAAC;IAQM,MAAM;QAET,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,EAC9B;YACI,MAAM,CAAC,MAAM,EAAE,CAAC;SACnB;IACL,CAAC;IAGM,KAAK;QAER,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,EAC9B;YACI,MAAM,CAAC,KAAK,EAAE,CAAC;SAClB;IACL,CAAC;IAGM,SAAS;QAEZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAEzB,MAAM,CAAC,OAAO,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAOM,MAAM,CAAC,IAAY;;QAEtB,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EACtB;YACI,MAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,0CAAE,OAAO,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YAC1C,IAAI,CAAC,IAAI,EAAE,CAAC;SACf;IACL,CAAC;IAOM,KAAK,CAAC,IAAY;;QAErB,MAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,0CAAE,KAAK,EAAE,CAAC;IAChC,CAAC;IAOM,MAAM,CAAC,IAAY;;QAEtB,MAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,0CAAE,MAAM,EAAE,CAAC;IACjC,CAAC;IAQM,IAAI;QAEP,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QAEf,KAAK,MAAM,MAAM,IAAI,YAAY,EACjC;YACI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EACxB;gBACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAW,CAAC,CAAC;aAClD;SACJ;IACL,CAAC;IAQM,IAAI,CAAC,KAAqB;QAE7B,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,EAC9B;YACI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EACtB;gBACI,IAAI,GAAG,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAQM,IAAI,CAAC,KAAqB;QAE7B,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAC/C;YACI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EACtB;gBACI,IAAI,GAAG,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAQM,EAAE,CAAC,KAAqB;QAE3B,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,EAC9B;YACI,IAAI,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EACpB;gBACI,IAAI,GAAG,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAQM,KAAK,CAAC,CAAa;QAEtB,IAAI,MAAM,GAAG,KAAK,CAAC;QAEnB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,IAAI,EAC9B;YACI,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EACnB;gBACI,MAAM,GAAG,IAAI,CAAC;aACjB;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["import type {\n    Animate,\n    Bounce,\n    Clamp,\n    ClampZoom,\n    Decelerate,\n    Drag,\n    Follow,\n    MouseEdges,\n    Pinch,\n    Plugin,\n    Snap,\n    SnapZoom,\n    Wheel,\n} from './plugins';\nimport type { FederatedEvent } from '@pixi/events';\nimport type { Viewport } from './Viewport';\n\nconst PLUGIN_ORDER = [\n    'drag',\n    'pinch',\n    'wheel',\n    'follow',\n    'mouse-edges',\n    'decelerate',\n    'animate',\n    'bounce',\n    'snap-zoom',\n    'clamp-zoom',\n    'snap',\n    'clamp',\n];\n\n/**\n * Use this to access current plugins or add user-defined plugins\n *\n * @public\n */\nexport class PluginManager\n{\n    /** Maps mounted plugins by their type */\n    public plugins: Partial<Record<string, Plugin>>;\n\n    /**\n     * List of plugins mounted\n     *\n     * This list is kept sorted by the internal priority of plugins (hard-coded).\n     */\n    public list: Array<Plugin>;\n\n    /** The viewport using the plugins managed by `this`. */\n    public readonly viewport: Viewport;\n\n    /** This is called by {@link Viewport} to initialize the {@link Viewport.plugins plugins}. */\n    constructor(viewport: Viewport)\n    {\n        this.viewport = viewport;\n        this.list = [];\n        this.plugins = {};\n    }\n\n    /**\n     * Inserts a named plugin or a user plugin into the viewport\n     * default plugin order: 'drag', 'pinch', 'wheel', 'follow', 'mouse-edges', 'decelerate', 'bounce',\n     * 'snap-zoom', 'clamp-zoom', 'snap', 'clamp'\n     *\n     * @param {string} name of plugin\n     * @param {Plugin} plugin - instantiated Plugin class\n     * @param {number} index to insert userPlugin (otherwise inserts it at the end)\n     */\n    public add(name: string, plugin: Plugin, index: number = PLUGIN_ORDER.length)\n    {\n        const oldPlugin = this.plugins[name];\n\n        if (oldPlugin)\n        {\n            oldPlugin.destroy();\n        }\n\n        this.plugins[name] = plugin;\n\n        const current = PLUGIN_ORDER.indexOf(name);\n\n        if (current !== -1)\n        {\n            PLUGIN_ORDER.splice(current, 1);\n        }\n\n        PLUGIN_ORDER.splice(index, 0, name);\n        this.sort();\n    }\n\n    public get(name: 'animate', ignorePaused?: boolean): Animate | undefined | null;\n    public get(name: 'bounce', ignorePaused?: boolean): Bounce | undefined | null;\n    public get(name: 'clamp', ignorePaused?: boolean): Clamp | undefined | null;\n    public get(name: 'clamp-zoom', ignorePaused?: boolean): ClampZoom | undefined | null;\n    public get(name: 'decelerate', ignorePaused?: boolean): Decelerate | undefined | null;\n    public get(name: 'drag', ignorePaused?: boolean): Drag | undefined | null;\n    public get(name: 'follow', ignorePaused?: boolean): Follow | undefined | null;\n    public get(name: 'mouse-edges', ignorePaused?: boolean): MouseEdges | undefined | null;\n    public get(name: 'pinch', ignorePaused?: boolean): Pinch | undefined | null;\n    public get(name: 'snap', ignorePaused?: boolean): Snap | undefined | null;\n    public get(name: 'snap-zoom', ignorePaused?: boolean): SnapZoom | undefined | null;\n    public get(name: 'wheel', ignorePaused?: boolean): Wheel | undefined | null;\n    public get<T extends Plugin = Plugin>(name: string, ignorePaused?: boolean): T | undefined | null;\n\n    /**\n     * Get plugin\n     *\n     * @param {string} name of plugin\n     * @param {boolean} [ignorePaused] return null if plugin is paused\n     */\n    public get<T extends Plugin = Plugin>(name: string, ignorePaused?: boolean): T | undefined | null\n    {\n        if (ignorePaused)\n        {\n            if (this.plugins[name]?.paused)\n            {\n                return null;\n            }\n        }\n\n        return this.plugins[name] as T;\n    }\n\n    /**\n     * Update all active plugins\n     *\n     * @internal\n     * @ignore\n     * @param {number} elapsed type in milliseconds since last update\n     */\n    public update(elapsed: number): void\n    {\n        for (const plugin of this.list)\n        {\n            plugin.update(elapsed);\n        }\n    }\n\n    /**\n     * Resize all active plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public resize(): void\n    {\n        for (const plugin of this.list)\n        {\n            plugin.resize();\n        }\n    }\n\n    /** Clamps and resets bounce and decelerate (as needed) after manually moving viewport */\n    public reset(): void\n    {\n        for (const plugin of this.list)\n        {\n            plugin.reset();\n        }\n    }\n\n    /** removes all installed plugins */\n    public removeAll(): void\n    {\n        this.list.forEach((plugin) =>\n        {\n            plugin.destroy();\n        });\n        this.plugins = {};\n        this.sort();\n    }\n\n    /**\n     * Removes installed plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n    public remove(name: string): void\n    {\n        if (this.plugins[name])\n        {\n            this.plugins[name]?.destroy();\n            delete this.plugins[name];\n            this.viewport.emit('plugin-remove', name);\n            this.sort();\n        }\n    }\n\n    /**\n     * Pause plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n    public pause(name: string): void\n    {\n        this.plugins[name]?.pause();\n    }\n\n    /**\n     * Resume plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n    public resume(name: string): void\n    {\n        this.plugins[name]?.resume();\n    }\n\n    /**\n     * Sort plugins according to PLUGIN_ORDER\n     *\n     * @internal\n     * @ignore\n     */\n    public sort()\n    {\n        this.list = [];\n\n        for (const plugin of PLUGIN_ORDER)\n        {\n            if (this.plugins[plugin])\n            {\n                this.list.push(this.plugins[plugin] as Plugin);\n            }\n        }\n    }\n\n    /**\n     * Handle down for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public down(event: FederatedEvent): boolean\n    {\n        let stop = false;\n\n        for (const plugin of this.list)\n        {\n            if (plugin.down(event))\n            {\n                stop = true;\n            }\n        }\n\n        return stop;\n    }\n\n    /**\n     * Handle move for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public move(event: FederatedEvent): boolean\n    {\n        let stop = false;\n\n        for (const plugin of this.viewport.plugins.list)\n        {\n            if (plugin.move(event))\n            {\n                stop = true;\n            }\n        }\n\n        return stop;\n    }\n\n    /**\n     * Handle up for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public up(event: FederatedEvent): boolean\n    {\n        let stop = false;\n\n        for (const plugin of this.list)\n        {\n            if (plugin.up(event))\n            {\n                stop = true;\n            }\n        }\n\n        return stop;\n    }\n\n    /**\n     * Handle wheel event for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public wheel(e: WheelEvent): boolean\n    {\n        let result = false;\n\n        for (const plugin of this.list)\n        {\n            if (plugin.wheel(e))\n            {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n}\n"]}